{"/home/travis/build/npmtest/node-npmtest-cowsay/test.js":"/* istanbul instrument in package npmtest_cowsay */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cowsay/lib.npmtest_cowsay.js":"/* istanbul instrument in package npmtest_cowsay */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cowsay = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cowsay = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cowsay/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cowsay && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cowsay */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cowsay\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cowsay.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cowsay.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cowsay.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cowsay.__dirname + '/lib.npmtest_cowsay.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cowsay/node_modules/cowsay/index.js":"var baloon = require(\"./lib/balloon\");\nvar cows = require(\"./lib/cows\");\nvar faces = require(\"./lib/faces\");\n\nexports.say = function (options) {\n\treturn doIt(options, true);\n};\n\nexports.think = function (options) {\n\treturn doIt(options, false);\n};\n\nexports.list = cows.list;\n\nfunction doIt (options, sayAloud) {\n\tvar cow = cows.get(options.f || \"default\");\n\tvar face = faces(options);\n\tface.thoughts = sayAloud ? \"\\\\\" : \"o\";\n\n\tvar action = sayAloud ? \"say\" : \"think\";\n\treturn baloon[action](options.text || options._.join(\" \"), options.n ? null : options.W) + \"\\n\" + cow(face);\n}\n","/home/travis/build/npmtest/node-npmtest-cowsay/node_modules/cowsay/lib/balloon.js":"var os = require(\"os\");\n\nexports.say = function (text, wrap) {\n\tdelimiters = {\n\t\tfirst : [\"/\", \"\\\\\"],\n\t\tmiddle : [\"|\", \"|\"],\n\t\tlast : [\"\\\\\", \"/\"],\n\t\tonly : [\"<\", \">\"]\n\t};\n\n\treturn format(text, wrap, delimiters);\n}\n\nexports.think = function (text, wrap) {\n\tdelimiters = {\n\t\tfirst : [\"(\", \")\"],\n\t\tmiddle : [\"(\", \")\"],\n\t\tlast : [\"(\", \")\"],\n\t\tonly : [\"(\", \")\"]\n\t};\n\n\treturn format(text, wrap, delimiters);\n}\n\nfunction format (text, wrap, delimiters) {\n\tvar lines = split(text, wrap);\n\tvar maxLength = max(lines);\n\n\tvar balloon;\n\tif (lines.length === 1) {\n\t\tballoon = [\n\t\t\t\" \" + top(maxLength), \n\t\t\tdelimiters.only[0] + \" \" + lines[0] + \" \" + delimiters.only[1],\n\t\t\t\" \" + bottom(maxLength)\n\t\t];\n\t} else {\n\t\tballoon = [\" \" + top(maxLength)];\n\n\t\tfor (var i = 0, len = lines.length; i < len; i += 1) {\n\t\t\tvar delimiter;\n\n\t\t\tif (i === 0) {\n\t\t\t\tdelimiter = delimiters.first;\n\t\t\t} else if (i === len - 1) {\n\t\t\t\tdelimiter = delimiters.last;\n\t\t\t} else {\n\t\t\t\tdelimiter = delimiters.middle;\n\t\t\t}\n\n\t\t\tballoon.push(delimiter[0] + \" \" + pad(lines[i], maxLength) + \" \" + delimiter[1]);\n\t\t}\n\n\t\tballoon.push(\" \" + bottom(maxLength));\n\t}\n\n\treturn balloon.join(\"\\n\"); //os.EOL\n}\n\nfunction split (text, wrap) {\n\ttext = text.replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, \"\\n\").replace(/^\\uFEFF/, '').replace(/\\t/g, '        ');\n\n\tvar lines = [];\n\tif (!wrap) {\n\t\tlines = text.split(\"\\n\");\n\t} else {\n\t\tvar start = 0;\n\t\twhile (start < text.length) {\n\t\t\tvar nextNewLine = text.indexOf(\"\\n\", start);\n\n\t\t\tvar wrapAt = Math.min(start + wrap, nextNewLine === -1 ? text.length : nextNewLine);\n\n\t\t\tlines.push(text.substring(start, wrapAt));\n\t\t\tstart = wrapAt;\n\n\t\t\t// Ignore next new line\n\t\t\tif (text.charAt(start) === \"\\n\") {\n\t\t\t\tstart += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn lines;\n}\n\nfunction max (lines) {\n\tvar max = 0;\n\tfor (var i = 0, len = lines.length; i < len; i += 1) {\n\t\tif (lines[i].length > max) {\n\t\t\tmax = lines[i].length;\n\t\t}\n\t}\n\n\treturn max;\n}\n\nfunction pad (text, length) {\n\treturn text + (new Array(length - text.length + 1)).join(\" \");\n}\n\nfunction top (length) {\n\treturn new Array(length + 3).join(\"_\");\n}\n\nfunction bottom (length) {\n\treturn new Array(length + 3).join(\"-\");\n}\n","/home/travis/build/npmtest/node-npmtest-cowsay/node_modules/cowsay/lib/cows.js":"var path = require(\"path\");\nvar fs = require(\"fs\");\nvar replacer = require(\"./replacer\");\n\nvar textCache = {};\n\nexports.get = function (cow) {\n\tvar text = textCache[cow];\n\n\tif (!text) {\n\t\tvar filePath;\n\n\t\tif (cow.match(/\\\\/) || cow.match(/\\//)) {\n\t\t\tfilePath = cow;\n\t\t} else {\n\t\t\tfilePath = path.join(__dirname, \"/../cows\", cow) + \".cow\";\n\t\t}\n\t\ttext = fs.readFileSync(filePath, \"utf-8\");\n\t\ttextCache[cow] = text;\n\t}\n\n\treturn function (options) {\n\t\treturn replacer(text, options);\n\t};\n}\n\nexports.list = function (callback) {\n\tfs.readdir(path.join(__dirname, \"../cows\"), function (err, files) {\n\t\tif (err) return callback(err);\n\n\t\tvar cows = files.map(function (cow) {\n\t\t\treturn path.basename(cow, \".cow\");\n\t\t});\n\n\t\treturn callback(null, cows);\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-cowsay/node_modules/cowsay/lib/replacer.js":"module.exports = function (cow, variables) {\n\tvar eyes = escapeRe(variables.eyes);\n\tvar tongue = escapeRe(variables.tongue);\n\n\tif (cow.indexOf(\"$the_cow\") !== -1) {\n\t\tcow = extractTheCow(cow);\n\t}\n\n\treturn cow\n\t\t.replace(/\\$thoughts/g, variables.thoughts)\n\t\t.replace(/\\$eyes/g, eyes)\n\t\t.replace(/\\$tongue/g, tongue)\n\t\t.replace(/\\$\\{eyes\\}/g, eyes)\n\t\t.replace(/\\$\\{tongue\\}/g, tongue)\n\t;\n};\n\n/*\n * \"$\" dollar signs must be doubled before being used in a regex replace\n * This can occur in eyes or tongue.\n * For example:\n *\n * cowsay -g Moo!\n *\n * cowsay -e \"\\$\\$\" Moo!\n */\nfunction escapeRe (s) {\n\tif (s && s.replace) {\n\t\treturn s.replace(/\\$/g, \"$$$$\");\n\t}\n\treturn s;\n}\n\nfunction extractTheCow (cow) {\n\tcow = cow.replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, \"\\n\").replace(/^\\uFEFF/, '');\n\tvar match = /\\$the_cow\\s*=\\s*<<\"*EOC\"*;*\\n([\\s\\S]+)\\nEOC\\n/.exec(cow);\n\n\tif (!match) {\n\t\tconsole.error(\"Cannot parse cow file\\n\", cow);\n\t\treturn cow;\n\t} else {\n\t\treturn match[1].replace(/\\\\{2}/g, \"\\\\\").replace(/\\\\@/g, \"@\").replace(/\\\\\\$/g, \"$\");\n\t}\n}","/home/travis/build/npmtest/node-npmtest-cowsay/node_modules/cowsay/lib/faces.js":"var modes = {\n\t\"b\" : {\n\t\teyes : \"==\",\n\t\ttongue : \"  \"\n\t},\n\t\"d\" : {\n\t\teyes : \"xx\",\n\t\ttongue : \"U \"\n\t},\n\t\"g\" : {\n\t\teyes : \"$$\",\n\t\ttongue : \"  \"\n\t},\n\t\"p\" : {\n\t\teyes : \"@@\",\n\t\ttongue : \"  \"\n\t},\n\t\"s\" : {\n\t\teyes : \"**\",\n\t\ttongue : \"U \"\n\t},\n\t\"t\" : {\n\t\teyes : \"--\",\n\t\ttongue : \"  \"\n\t},\n\t\"w\" : {\n\t\teyes : \"OO\",\n\t\ttongue : \"  \"\n\t},\n\t\"y\" : {\n\t\teyes : \"..\",\n\t\ttongue : \"  \"\n\t}\n};\n\nmodule.exports = function (options) {\n\tfor (var mode in modes) {\n\t\tif (options[mode] === true) {\n\t\t\treturn modes[mode];\n\t\t}\n\t}\n\n\treturn {\n\t\teyes : options.e || \"oo\",\n\t\ttongue : options.T || \"  \"\n\t};\n};\n","/home/travis/build/npmtest/node-npmtest-cowsay/node_modules/cowsay/cli.js":"#!/usr/bin/env node\nvar argv = require(\"optimist\")\n.usage(\"Usage: $0 [-e eye_string] [-f cowfile] [-h] [-l] [-n] [-T tongue_string] [-W column] [-bdgpstwy] text\\n\\n\" +\n\t\"If any command-line arguments are left over after all switches have been processed, they become the cow's message.\\n\\n\" +\n\t\"If the program is invoked as cowthink then the cow will think its message instead of saying it.\")\n.options({\n\t\"e\" : {\n\t\tdefault : \"oo\"\n\t},\n\t\"T\" : {\n\t\tdefault : \"  \"\n\t},\n\t\"W\" : {\n\t\tdefault : 40\n\t},\n\t\"f\" : {\n\t\tdefault : \"default\"\n\t}\n})\n.describe({\n\t\"b\" : \"Mode: Borg\",\n\t\"d\" : \"Mode: Dead\",\n\t\"g\" : \"Mode: Greedy\",\n\t\"p\" : \"Mode: Paranoia\",\n\t\"s\" : \"Mode: Stoned\",\n\t\"t\" : \"Mode: Tired\",\n\t\"w\" : \"Mode: Wired\",\n\t\"y\" : \"Mode: Youthful\",\n\t\"e\" : \"Select the appearance of the cow's eyes.\",\n\t\"T\" : \"The tongue is configurable similarly to the eyes through -T and tongue_string.\",\n\t\"h\" : \"Display this help message\",\n\t\"n\" : \"If it is specified, the given message will not be word-wrapped.\",\n\t\"W\" : \"Specifies roughly where the message should be wrapped. The default is equivalent to -W 40 i.e. wrap words at or before the 40th column.\",\n\t\"f\" : \"Specifies a cow picture file (''cowfile'') to use. It can be either a path to a cow file or the name of one of cows included in the package.\",\n\t\"l\" : \"List all cowfiles included in this package.\"\n})\n.boolean([\"b\", \"d\", \"g\", \"p\", \"s\", \"t\", \"w\", \"y\", \"n\", \"h\", \"l\"])\n.argv;\n\nif (argv.l) {\n\tlistCows();\n} else if (argv.h) {\n\tshowHelp();\n} else if (argv._.length) {\n\tsay();\n} else {\n\trequire(\"get-stdin\")(function (data) {\n\t\tif (data) {\n\t\t\targv._ = [data];\n\t\t\tsay();\n\t\t} else {\n\t\t\tshowHelp();\n\t\t}\n\t});\n}\n\nfunction say () {\n\tvar module = require(\"./index\");\n\n\tvar think = /think$/.test(argv[\"$0\"]);\n\n\tconsole.log(think ? module.think(argv) : module.say(argv));\n}\n\nfunction listCows () {\n\trequire(\"./index\").list(function(err, list) {\n\tif (err) throw new Error(err);\n\tconsole.log(list.join(\"  \"));\n  });\n}\n\nfunction showHelp () {\n\trequire(\"optimist\").showHelp();\n}\n"}